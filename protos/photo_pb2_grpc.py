# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import photo_pb2 as photo__pb2


class PhotoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPhotos = channel.unary_stream(
                '/PhotoService/GetPhotos',
                request_serializer=photo__pb2.GetPhotosRequest.SerializeToString,
                response_deserializer=photo__pb2.GetPhotoResponse.FromString,
                )
        self.UploadPhotos = channel.stream_unary(
                '/PhotoService/UploadPhotos',
                request_serializer=photo__pb2.UploadPhotoRequest.SerializeToString,
                response_deserializer=photo__pb2.UploadPhotosResponse.FromString,
                )


class PhotoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPhotos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadPhotos(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PhotoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPhotos': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPhotos,
                    request_deserializer=photo__pb2.GetPhotosRequest.FromString,
                    response_serializer=photo__pb2.GetPhotoResponse.SerializeToString,
            ),
            'UploadPhotos': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadPhotos,
                    request_deserializer=photo__pb2.UploadPhotoRequest.FromString,
                    response_serializer=photo__pb2.UploadPhotosResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PhotoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PhotoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPhotos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/PhotoService/GetPhotos',
            photo__pb2.GetPhotosRequest.SerializeToString,
            photo__pb2.GetPhotoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadPhotos(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/PhotoService/UploadPhotos',
            photo__pb2.UploadPhotoRequest.SerializeToString,
            photo__pb2.UploadPhotosResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
